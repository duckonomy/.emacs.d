#+TITLE: Emacs configuration file
#+AUTHOR: Duckonomy
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes
* Description
** Keybindings & Commonly-used functions
*** Philosophy
Use as much default emacs keybindings as possible and adjust external applications and custom functionality accordingly.
Use evil-mode and keychords when doing extensive code editing (less so in org mode and other "writing" modes).
Group each keybinding to it's purpose and make it idiomatic to emacs

Shouldn't have C-c global keys
*** Cheatsheets
https://courses.cs.washington.edu/courses/cse351/16wi/sections/1/Cheatsheet-emacs.pdf
http://www.rgrjr.com/emacs/emacs_cheat.html
https://www.gnu.org/software/emacs/refcards/pdf/refcard.pdf
*** Global
**** Internal
***** Repeat
 - ~C-x z~ (~repeat~) - repeat (kinda like vim dot I guess)
***** Undo/Redo
 - ~C-x u~ (~undo~) - Undo
 - ~C-/~ (~undo~) - Undo
 - ~C-_~ (~undo~) - Undo

 - ~C-g C-x u~ (~redo~) - Redo
 - ~C-g C-/~ (~redo~) - Redo
 - ~C-g C-_~ (~redo~) - Redo
***** Macros 
https://www.reddit.com/r/emacs/comments/bs9qcc/keyboard_macros_usage/
 - ~C-x (~ (kmacro-start-macro)
 - ~F3~ (kmacro-start-macro)

 - ~C-x )~ (kmacro-end-macro)
 - ~F4~ (kmacro-end-macro)

 - ~C-x e~ (kmacro-end-and-call-macro)
 - ~F4~ (kmacro-end-and-call-macro)

 - ~C-u 0 C-x e~ (execute the macro an infinite number of times until the end of the file is reached)

 - ~C-x C-k n~ (kmacro-name-last-macro)
 - ~C-x C-k b~ (kmacro-bind-to-key)
 - ~M-x insert-kbd-macro~

***** Numeric keys
~C-u {0-9}~
~M-{0-9}~
~C-{0-9}~

***** Rectangles
~C-x r k~ (Kill selection)
~C-x r M-w~ (Save selection)
~C-x r y~ (Yank selection)
~C-x r o~ (Insert blank space)
~C-x r c~ (Insert line numbers)
~C-x r N~ (Clear the region)
~C-x r t~ (Replace rectangle contents with string)
~C-x SPC~ (Toggle Rectangle select)

***** Narrow
~C-x n n~ (~narrow-to-region~)
~C-x n p~ (~narrow-to-page~)
~C-x n d~ (~narrow-to-function~ [definition])
~C-x n s~ (~org-narrow-to-subtree~)
~C-x n w~ (~widen~)

***** Files
 - ~C-x C-f~ (~find-file~) - find files
 - ~C-x i~ (~insert-file~) - useful in remote sessions when you want to see stdout of file
 - ~C-x s~ (~save-some-buffers~) - saves all open buffers
 - ~C-x C-v~ (~find-alternate-file~) - replace file with other file
 - ~C-x C-q~ (~read-only-mode~) - read-only

***** Indentation
 - ~C-x Tab~ or ~C-x C-i~ (~rigid tab~) (controlled by keyboard keys tho..., which is problematic) - ideally keyboards with hardware binding to keys would be nice
   - SHOULD REPLACE

***** ~delimit-columns-str-before~
***** Insert Unicode
***** Hippie expand
***** Emacs stuff
***** Counsel
***** Window Management
***** ISearch
***** Ibuffer
***** Comment
***** Flymake
**** External
***** Projectile
***** Ivy/Counsel/Swiper
***** Hl-todo
***** Expand Region
***** Evil
****** Commentary
****** Surround
***** Hydra
***** TRAMP
***** Ace-Window
***** Avy
***** Anzu
***** Company
***** Yasnippets
 - ~C-c k~ (~yas-expand~)
***** Multiple Cursors
***** Centaur Tabs
***** Undo-tree
**** Custom
***** Insert snippets/tags
*** Application
**** Internal
***** Org
 - ~C-c '~ (~org-edit-special~)
 - ~C-c C-t~ (~org-todo~)
 - ~M-S-Ret~ (~org-insert-todo-heading~)
***** Markdown
***** Dired
***** Ediff
***** Gnus
***** Docview
***** Erc/Circe
***** Sendmail/Smtpmail
***** Epg
***** Package.el
**** External
***** Magit
***** Flycheck
***** LSP
***** Treemacs
***** Pdf-tools
***** Writerooms
***** Lispy/Parinfer/Paredit/Smart Parens
***** Auctex
* Configurations
** Header
#+BEGIN_SRC emacs-lisp
;;; README.el --- Emacs config file

;;; Commentary:
;;
;; This provides my Emacs file.
;;

;;; Code:

#+END_SRC

** Core
This contains all settings and applications built into ~emacs~ and external applications that extend that.
*** Settings
Opinionated personal emacs settings with sanitized defaults.

=NOTE=: Packages with ~defer t~ are arbitrary are are not defined inside emacs with a ~(provide 'foo)~. Although some do have a built-in way of calling it, I wanted to group them semantically.
**** Default Emacs
Settings that are defined in Emacs C source code.
#+begin_src emacs-lisp
(use-package emacs
  :custom
  (use-dialog-box nil "Disable dialog boxes")
  (debug-on-quit nil)
  (show-help-function nil)
  (sentence-end-double-space nil "Sentence correctly")
  (indicate-empty-lines nil "Don't show empty lines")
  (confirm-kill-emacs nil)
  :config
  (fset 'yes-or-no-p 'y-or-n-p)
  (put 'narrow-to-region 'disabled nil)
  (put 'downcase-region 'disabled nil))
#+end_src

**** Startup
#+begin_src emacs-lisp
(use-package "startup"
  :ensure nil
  :custom
  (inhibit-startup-screen t)
  (inhibit-startup-echo-area-message "")
  (initial-scratch-message "")
  (initial-major-mode (quote text-mode)))
#+end_src

**** Server
#+begin_src emacs-lisp
(use-package server
  :hook
  (server-switch . (lambda () (select-frame-set-input-focus (selected-frame)))))
#+end_src

**** Window
#+begin_src emacs-lisp
(use-package "window"
  :ensure nil
  :custom
  (highlight-nonselected-windows nil "Each window does not highlights its own region")
  (split-width-threshold nil "Favor horizontal splits")
  (max-mini-window-height 0.3 "Max mini window height")
  (resize-mini-windows 'grow-only "Only growth in mini-window resizing"))
#+end_src

**** Frame
Set frame padding (~internal-border~)
#+begin_src emacs-lisp
  (use-package frame
    :ensure nil
    :bind
    ("C-z" . nil)
    :custom
    (frame-title-format
     '(buffer-file-name "%f"
                        (dired-directory dired-directory "%b")))
    (window-divider-default-places t)
    (window-divider-default-bottom-width 0)
    (window-divider-default-right-width 1)
    :config
    (set-frame-parameter (selected-frame) 'internal-border-width 40)
    (add-to-list 'default-frame-alist '(internal-border-width . 40)))
#+end_src

**** Buffer
#+begin_src emacs-lisp
  (use-package buffer
    :ensure nil
    :defer t
    :custom
    (uniquify-buffer-name-style 'forward "Make redundant buffers unique")
    (indicate-buffer-boundaries nil "Don't show where buffer starts/ends"))
#+end_src

**** Minibuffer
#+BEGIN_SRC emacs-lisp
(use-package minibuffer
  :ensure nil
  :custom
  (read-file-name-completion-ignore-case t)
  (read-buffer-completion-ignore-case t)
  (enable-recursive-minibuffers nil "Do not minibuffer commands in the minibuffer")
  :config
  (mapc (lambda (x)
	  (add-to-list 'completion-ignored-extensions x))
	'(".aux" ".bbl" ".blg" ".exe"
	  ".log" ".meta" ".out" ".pdf"
	  ".synctex.gz" ".tdo" ".toc"
	  "-pkg.el" "-autoloads.el"
	  "Notes.bib" "auto/"
	  ".o" ".elc" "~" ".bin"
	  ".class" ".exe" ".ps"
	  ".abs" ".mx" ".~jv" ".rbc"
	  ".pyc" ".beam" ".aux" ".out"
	  ".pdf" ".hbc")))
#+END_SRC

**** Modeline
#+begin_src emacs-lisp
(use-package modeline
  :ensure nil
  :defer t
  :custom
  (mode-line-default-help-echo nil))
#+end_src

**** Files
***** Files
#+BEGIN_SRC emacs-lisp
  (use-package files
    :ensure nil
    :custom
    (make-backup-files nil)
    (auto-save-default nil)
    (cache-long-line-scans t "cache long lines")
    (backup-directory-alist `(("." . "~/.saves")))
    (backup-by-copying t)
    (delete-old-versions t)
    (kept-new-versions 6)
    (kept-old-versions 2)
    (auto-save-list-file-prefix nil)
    (org-clock-persist-file "~/.config/emacs/org-clock-save.el")
    (smex-save-file "~/.config/emacs/smex-items")
    (version-control t))
#+END_SRC

***** Custom file
Create ~custom.el~ for auto-generated configurations outside my ~init.el~
#+BEGIN_SRC emacs-lisp
  (use-package cus-edit
    :ensure nil
    :custom
    (custom-file "~/.config/emacs/custom.el"))
#+END_SRC

**** Messages
#+BEGIN_SRC emacs-lisp
  (use-package message
    :ensure nil
    :custom
    (message-kill-buffer-on-exit t)
    (message-log-max nil)
    :init
    (kill-buffer "*Messages*"))
#+END_SRC

**** Line numbers
#+begin_src emacs-lisp
(use-package display-line-numbers
  :custom
  (display-line-numbers-width nil)
  (display-line-numbers-width-start t))
#+end_src

**** Delete selection
#+begin_src emacs-lisp
  (use-package delsel
    :ensure nil
    :bind
    (:map mode-specific-map 
          ("C-g" . minibuffer-keyboard-quit))
    :config
    (add-hook 'after-init-hook 'delete-selection-mode))
#+end_src

**** Parentheses
#+begin_src emacs-lisp
(use-package paren
  :ensure nil
  :custom
  (show-paren-mode t)
  (show-paren-delay 0)
  (show-paren-highlight-openparen t)
  (show-paren-when-point-inside-paren t))
#+end_src

**** Isearch
#+begin_src emacs-lisp
(use-package isearch
  :ensure nil
  :bind
  ([escape] . isearch-abort))
#+end_src

**** Simple
#+begin_src emacs-lisp
(use-package simple
  :ensure nil
  :preface
  (defadvice keyboard-escape-quit (around my-keyboard-escape-quit activate)
    "Keyboard escape quit."
    (let (orig-one-window-p)
      (fset 'orig-one-window-p (symbol-function 'one-window-p))
      (fset 'one-window-p (lambda (&optional nomini all-frames) t))
      (unwind-protect
          ad-do-it
        (fset 'one-window-p (symbol-function 'orig-one-window-p)))))
  :bind (("M-z" . zap-up-to-char)
         ([escape] . keyboard-escape-quit)
         :map minibuffer-local-map
         ([escape] . keyboard-escape-quit)
         :map minibuffer-local-ns-map
         ([escape] . keyboard-escape-quit)
         :map minibuffer-local-completion-map
         ([escape] . keyboard-escape-quit)
         :map minibuffer-local-must-match-map
         ([escape] . keyboard-escape-quit)
         :map minibuffer-local-isearch-map
         ([escape] . keyboard-escape-quit))
  :custom
  (kill-ring-max 3000)
  (next-line-add-newlines nil "Don't add newline when at buffer end")
  :config
  (column-number-mode +1)
  (toggle-truncate-lines 1)
  (autoload 'zap-up-to-char "misc"
    "Kill up to, but not including ARGth occurrence of CHAR." t))
#+end_src

**** Cursor
#+begin_src emacs-lisp
(use-package cursor
  :ensure nil
  :defer t
  :init
  (blink-cursor-mode -1)
  :custom
  (visible-cursor nil "get rid of cursor blink in console")
  (cursor-in-non-selected-windows nil "Keep cursors and highlights in current window only")
  (x-stretch-cursor t "Draw the block cursor as wide as the glyph under it. (i.e. tabs)"))
#+end_src

**** Visual-bell
#+begin_src emacs-lisp
(use-package visual-bell
  :ensure nil
  :defer t
  :custom
  (visible-bell nil)
  (ring-bell-function 'ignore))
#+end_src

**** Scroll
#+begin_src emacs-lisp
(use-package scroll
  :ensure nil
  :defer t
  :custom
  (scroll-error-top-bottom t "Scroll error.") ;; window.el but no provide
  (scroll-conservatively 10000 "Smoother scroll with keyboard") ;; or 101
  (fast-but-imprecise-scrolling t "Fast but imprecise scrolling")
  (scroll-preserve-screen-position t "Adjusts point to keep the cursor at the same screen position whenever a scroll command moves it off-window")
  (scroll-margin 10 "Leave scroll margin so that it doesn't have to go all the way down ( this breaks ace-window)  However pretty nice"))
#+end_src

**** Format
***** Basic
#+BEGIN_SRC emacs-lisp
(use-package format
  :ensure nil
  :defer t
  :hook 
  ((text-mode . (lambda ()
		  (setq truncate-lines nil
			global-visual-line-mode t
			word-wrap t)))
   (prog-mode . (lambda ()
		  (setq truncate-lines t
			global-visual-line-mode nil
			word-wrap nil)))))
#+END_SRC

***** Visual-fill-column
#+BEGIN_SRC emacs-lisp
  (use-package visual-fill-column
    :defer t
    :ensure t
    :custom
    (visual-fill-column-center-text nil)
    (visual-fill-column-width fill-column)
    ;; (split-window-preferred-function 'visual-line-mode-split-window-sensibly)
  )
#+END_SRC

***** Indentation
#+begin_src emacs-lisp
    (use-package indentation
      :ensure nil
      :defer t
      :preface
      (defvar evil-shift-width 8)
      :custom
      (tab-width 8)
      (c-basic-offset 8)
      (truncate-lines t)
      (tab-width 8)
      (javascript-indent-level 2) ; javascript-mode
      (js-indent-level 2) ; js-mode
      (js2-basic-offset 2)
      (web-mode-markup-indent-offset 2) ; web-mode, html tag in html file
      (web-mode-css-indent-offset 2) ; web-mode, css in html file
      (web-mode-code-indent-offset 2) ; web-mode, js code in html file
      (css-indent-offset 2) ; css-mode
      (typescript-indent-level 2) ; css-mode
      (indent-tabs-mode t)
      (backward-delete-char-untabify-method 'hungry))
      ;; (setq backward-delete-char-untabify-method 'all)
#+end_src

**** Auto Revert
Automatically update changes to file
#+BEGIN_SRC emacs-lisp
  (use-package autorevert
    :ensure nil
    :init
    (global-auto-revert-mode 1)
    :hook 
    (dired-mode . auto-revert-mode))
#+END_SRC

**** Save place
Jumps to previously editing place in file
#+BEGIN_SRC emacs-lisp
  (use-package saveplace 
    :ensure nil
    :init
    (save-place-mode 1))
#+END_SRC

**** Disable novice protection
Enable ~downcase-region~, ~set-goal-column~, ~narrow-to-region~, ~scroll-left~, ~erase-buffer~, ~downcase-region~
#+BEGIN_SRC emacs-lisp
  (use-package novice
    :ensure nil
    :custom
    (disabled-command-function nil))
#+END_SRC

**** Performance
***** Basic
#+begin_src emacs-lisp
  (use-package performance
    :ensure nil
    :defer t
    :custom
    (bidi-display-reordering nil "Disable bidirectional text support for slight performance bonus")
    (redisplay-dont-pause t "Don't pause display on input"))
#+end_src

***** Jit
#+BEGIN_SRC emacs-lisp
  (use-package jit-lock
    :ensure nil
    :custom
    (jit-lock-defer-time nil "Disable jit lock defer time")
    (jit-lock-stealth-nice 0.1 "Time in seconds to wait before beginning stealth fontification")
    (jit-lock-stealth-time 0.2 "Time in seconds to pause between chunks of stealth fontification")
    (jit-lock-stealth-verbose nil "Stealth fontification does not show status messages"))
#+END_SRC

**** Version Control
Enter a file symlinked to a git-controlled file without a prompt
#+BEGIN_SRC emacs-lisp
  (use-package vc-hooks
    :custom
    (vc-follow-symlinks nil))
#+END_SRC

**** Image Mode
Animated images loop forever rather than playing once
#+BEGIN_SRC emacs-lisp
  (use-package image-mode
    :ensure nil
    :custom
    (image-animate-loop t))
#+END_SRC

**** Disable GUI Elements
***** tool-bar
#+BEGIN_SRC emacs-lisp
  (use-package tool-bar
    :ensure nil
    :init
    (tool-bar-mode -1))
#+END_SRC

***** scroll-bar
#+BEGIN_SRC emacs-lisp
  (use-package scroll-bar
    :ensure nil
    :init
    (scroll-bar-mode -1))
#+END_SRC

***** menu-bar
#+BEGIN_SRC emacs-lisp
  (use-package menu-bar
    :ensure nil
    :init
    (menu-bar-mode -1))
#+END_SRC

***** fringe
#+BEGIN_SRC emacs-lisp
  (use-package fringe
    :ensure nil
    :init
    (set-fringe-style -1)
    :custom
    ;; Remove continuation arrow on right fringe. Overflowing text when word wrap is off
    (frame-inhibit-implied-resize t)
    (fringe-indicator-alist (delq (assq 'continuation fringe-indicator-alist)
                                  fringe-indicator-alist)))
#+END_SRC

***** tooltip
#+BEGIN_SRC emacs-lisp
  (use-package tooltip
    :ensure nil
    :defer t
    :init
    (tooltip-mode -1)
    :custom
    (x-gtk-use-system-tooltips nil))
#+END_SRC

**** Faces & Language & Encoding
***** Language
#+BEGIN_SRC emacs-lisp
(use-package languages
  :ensure nil
  :defer t
  :bind ("S-SPC" . nil)
  :init
  (set-language-environment "Korean"))
#+END_SRC

***** Encoding
#+begin_src emacs-lisp
(use-package encoding
  :ensure nil
  :defer t
  :init
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8))
#+end_src

*** Applications
**** TODO Epa-file (for gpg)
#+BEGIN_SRC emacs-lisp
(use-package epa-hook
  :custom
  (epa-file-name-regexp "\\.\\(gpg\\|asc\\)$")
  :init
  (epa-file-name-regexp-update))
#+END_SRC

**** TODO async
#+BEGIN_SRC emacs-lisp
(use-package async
  :ensure t
  :config
  (async-bytecomp-package-mode 1))
#+END_SRC

**** Ibuffer
#+begin_src emacs-lisp
(use-package ibuffer
  :bind
  ([remap list-buffers] . ibuffer))
#+end_src

**** Dired
#+begin_src emacs-lisp
(use-package dired
  :ensure nil
  :config
  (eval-after-load "dired"
    #'(lambda ()
        (put 'dired-find-alternate-file 'disabled nil)
        (define-key dired-mode-map (kbd "RET") #'dired-find-alternate-file)))
  :custom
  (delete-by-moving-to-trash t))
#+end_src

**** Ediff
#+begin_src emacs-lisp
(use-package ediff
  :ensure nil
  :custom 
  (ediff-split-window-function 'split-window-horizontally))
#+end_src

**** Eldoc
#+begin_src emacs-lisp
(use-package eldoc
  :ensure nil
  :diminish eldoc-mode
  :config
  (global-eldoc-mode +1)
  :custom
  (eldoc-idle-delay 0.4))
#+end_src

**** Org
***** Org
 #+BEGIN_SRC emacs-lisp
   (use-package org
     :ensure t 
     :ensure htmlize
     :ensure org-plus-contrib
     :mode ("\\.org\\'" . org-mode)
     :preface

     (defun my-org-comment-dwim (&optional arg)
       "Org-comment ARG dwim."
       (interactive "P")
       (or (org-babel-do-key-sequence-in-edit-buffer (kbd "M-;"))
           (comment-dwim arg)))

     (define-skeleton org-skeleton
       "Header info for a Emacs-org file."
       "Title: "
       "#+TITLE:" str " \n"
       "#+AUTHOR: Ian Park\n"
       )
     ;; UNSAFE
     :bind (("C-c i" . org-store-link)
            ("C-c c" . org-capture)
            ("C-c a" . org-agenda)
            ("C-c j" . org-clock-goto)
            :map org-mode-map
            ("C-]" . org-metaright)
            ("<C-[>" . org-metaleft)
            ("C-}" . org-shiftmetaright)
            ("C-{" . org-shiftmetaleft)
            ("M-]" . org-metaup)
            ("M-[" . org-metadown)
            ("M-}" . org-shiftmetaup)
            ("M-{" . org-shiftmetadown)
            ("C-)" . org-forward-element)
            ("C-(" . org-backward-element)
            ("<M-tab>" . org-force-cycle-archived)
            ("<C-tab>" . nil))
     :config

     (font-lock-add-keywords 'org-mode
                             '(("^ +\\([-*]\\) "
                                (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
     (org-clock-persistence-insinuate)
     (org-load-modules-maybe t)

     ;; Babel
     (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)

     (org-babel-do-load-languages
      'org-babel-load-languages
      '(
        (R . t)
        (dot . t)
        (haskell . t)
        (python . t)
        (shell . t)
        (C . t)
        ))
     :custom
     (org-src-preserve-indentation nil
                                   org-edit-src-content-indentation 0)
     (org-hide-emphasis-markers t)
     (org-hide-leading-stars t)
     (org-startup-indented t)
     (org-src-tab-acts-natively t)
     (org-src-fontify-natively t)
     (org-pretty-entities t)
     (org-use-speed-commands t)
     (org-adapt-indentation t)
     (auto-fill-mode t)
     (org-format-latex-options
      '(:foreground "#fff"
                    :background default
                    :scale 2.4
                    :html-foreground "#fff"
                    :html-background "Transparent"
                    :html-scale 2.4))
     (org-directory "~/Documents")
     (org-agenda-files
      (list (concat org-directory "/schedule.org") (concat org-directory "/todo.org")))
     (org-mobile-directory "~/Documents")
     (org-default-notes-file (concat org-directory "/schedule.org"))

     (org-agenda-skip-scheduled-if-done t)

     (org-agenda-sorting-strategy
      '((agenda habit-down time-up priority-down category-keep)
        (todo category-up priority-down)
        (tags priority-down category-keep)
        (search category-keep)))
     (org-confirm-babel-evaluate nil)

     (org-clock-persist t)
     (org-file-apps
      '((auto-mode . emacs)
        ("\\.mm\\'" . system)
        ("\\.x?html?\\'" . "firefox %s")
        ;; ("\\.pdf::\\([0-9]+\\)\\'" . "llpp \"%s\" -P %1")
        ;; ("\\.pdf\\'" . "llpp \"%s\"")
        ))
     (org-refile-targets (quote ((org-agenda-files :maxlevel . 4))))
     (org-agenda-span 'month)

     (org-return-follows-link t)

     (org-agenda-custom-commands
      '(("w" todo "WAITING" nil)
        ("n" todo "NEXT" nil)
        ("d" "Agenda + Next Actions" ((agenda) (todo "NEXT")))))
     (org-capture-templates
       '(("t" "Task" entry (file+headline "" "Tasks")
          "* TODO %?\n  %U\n  %a")))
     (org-refile-allow-creating-parent-nodes 'confirm)
     (org-use-speed-commands t)
     (org-clock-mode-line-total 'current)
     (org-publish-project-alist
      '(("html"
         :base-directory "~/Development/"
         :base-extension "org"
         :publishing-directory "~/Development/"
         :publishing-function org-publish-org-to-html)
        ("pdf"
         :base-directory "~/Documents/Essay/pdf/"
         :base-extension "org"
         :publishing-directory "~/Documents/Essay/pdf/"
         :publishing-function org-publish-org-to-pdf)
        ("all" :components ("html" "pdf"))))

     (org-latex-logfiles-extensions (quote ("lof" "lot" "tex" "tex~" "aux"
                                            "idx" "log" "out" "toc" "nav"
                                            "snm" "vrb" "dvi" "fdb_latexmk"
                                            "blg" "brf" "fls" "entoc" "ps"
                                            "spl" "bbl")))

     (org-latex-listings 'minted
                         org-latex-packages-alist '(("" "minted"))
                         org-latex-pdf-process
                         '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
                           "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
     (TeX-auto-untabify 't)

     (org-list-allow-alphabetical t))
 #+END_SRC

***** Org-journal
#+begin_src emacs-lisp
    (use-package org-journal
      :ensure t
      :defer t
      :preface
  (defun org-journal-date-format-func (time)
    "Custom function to insert journal date header.

    When buffer is empty prepend a header in front the entry header."
    (concat (when (= (buffer-size) 0)
              (concat
               (pcase org-journal-file-type
                 (`daily "#+TITLE: Daily Journal")
                 (`weekly "#+TITLE: Weekly Journal")
                 (`monthly "#+TITLE: Monthly Journal")
                 (`yearly "#+TITLE: Yearly Journal"))))
            org-journal-date-prefix
            (format-time-string "%A, %x" time)))


      :custom
      (org-journal-dir "~/Documents/Journal/")
      (org-journal-date-format 'org-journal-date-format-func))
  ;; ("%A, %d %B %Y")
#+end_src

***** Org-bullets
 #+BEGIN_SRC emacs-lisp
   (use-package org-bullets
     :ensure t
     :commands (org-bullets-mode)
     :hook (org-mode . (lambda () (org-bullets-mode 1)))
     :custom
     (org-bullets-bullet-list '("#" "#" "#" "•" "•" "•" "•" "•" "•" "•" "•" "•" "•" "•" ))
     (org-bullets-face-name (quote org-bullets-face))
     :init
      (defface org-bullets-face
        '(
          (t (
              :foreground "#42B983"
              :family "Roboto Condensed"
              :weight bold
              :height 1.4
              )))
        ;; This document is necessary as an argument
        "face font for org-bullets"
        :group 'org-faces))
 #+END_SRC

***** Babel
****** Tangle Emacs Config
 #+BEGIN_SRC emacs-lisp
   (use-package ob-tangle
     :preface
     (defun tangle-dotemacs ()
       "If the current buffer is 'init.org' the code-blocks are tangled, and the tangled file is compiled."
       (when (equal (buffer-file-name)
                    (expand-file-name (concat user-emacs-directory "README.org")))
         (let ((prog-mode-hook nil))
           (org-babel-tangle)
           ;; (byte-compile-file (concat user-emacs-directory "README.el"))
           )))
     (defun tangle-dotfiles ()
       "If the current file is in '~/etc', the code blocks are tangled."
       (when (equal (file-name-directory (directory-file-name buffer-file-name))
                    (concat (getenv "HOME") "/lib/themes/"))
         (org-babel-tangle)
         (message "%s tangled" buffer-file-name)))
     ;; :hook ((after-save . tangle-dotemacs)
     ;;        (after-save . tangle-dotfiles))
     :config
     (add-to-list 'org-babel-default-header-args:R
                  '(:preamble . "library(mosaic)\nlibrary(ggformula)"))
     :custom
     (org-confirm-babel-evaluate nil))
 #+END_SRC

**** Eshell
#+BEGIN_SRC emacs-lisp
(use-package eshell
  :defer t
  :preface
  (defun chunyang-eshell-mode-setup ()
    (remove-hook 'eshell-output-filter-functions
                 'eshell-postoutput-scroll-to-bottom))
  (defun rm-comint-postoutput-scroll-to-bottom ()
    (remove-hook 'comint-output-filter-functions
                 'comint-postoutput-scroll-to-bottom))
  (defun duckonomy/eshell-clear-prompt ()
    "Clear `eshell' buffer, comint-style."
    (interactive)
    (let ((input (eshell-get-old-input)))
      (eshell/clear-scrollback)))
  ;; this works best :)
  (defun duckonomy/eshell-clear ()
    "Clear `eshell' buffer, comint-style."
    (interactive)
    (let ((input (eshell-get-old-input)))
      (eshell/clear-scrollback)
      (eshell-emit-prompt)
      (insert input)))
  (defun shortened-path (path max-len)
    "Return a modified version of PATH, replacing some components.
with single characters starting from the left to try and get
the path down to MAX-LEN"
    (let* ((components (split-string (abbreviate-file-name path) "/"))
           (len (+ (1- (length components))
                   (reduce '+ components :key 'length)))
           (str ""))
      (while (and (> len max-len)
                  (cdr components))
        (setq str (concat str (if (= 0 (length (car components)))
                                  "/"
                                (string (elt (car components) 0) ?/)))
              len (- len (1- (length (car components))))
              components (cdr components)))
      (concat str (reduce (lambda (a b) (concat a "/" b)) components))))
  (defun eshell-new()
    "Open a new instance of eshell."
    (interactive)
    (eshell 'N))
  :custom
  (eshell-cmpl-cycle-completions nil)
  (eshell-buffer-maximum-lines 20000)
  (eshell-history-size 350)
  (eshell-hist-ignoredups t)
  (eshell-buffer-shorthand t)
  (eshell-highlight-prompt nil)
  (eshell-plain-echo-behavior t)
  (eshell-scroll-to-bottom-on-output nil)
  (comint-move-point-for-output t)
  (eshell-prompt-function
   (lambda ()
     (concat
      (propertize "┌─[" 'face `(:foreground "#61AFEF"))
      ;; (propertize (concat (eshell/pwd)) 'face `(:foreground "#56B6C2"))
      (propertize (shortened-path (eshell/pwd) 40) 'face `(:foreground "#56B6C2"))

      (if (magit-get-current-branch)
          (concat
           (propertize "@" 'face `(:foreground "#98C379"))
           (propertize (magit-get-current-branch) 'face `(:foreground "#98C379")))
        "")
      (propertize "]──[" 'face `(:foreground "#61AFEF"))
      (propertize (format-time-string "%I:%M %p" (current-time)) 'face `(:foreground "#D56871"))
      (propertize "]\n" 'face `(:foreground "#61AFEF"))
      (propertize "└─>" 'face `(:foreground "#61AFEF"))
      (propertize (if (= (user-uid) 0) " # " " $ ") 'face `(:foreground "#E5C07B")))))
  :hook ((eshell-mode . chunyang-eshell-mode-setup)
         (eshell-mode . (lambda()
                          (local-set-key (kbd "C-l") 'duckonomy/eshell-clear)))
         (eshell-mode . (lambda()
                          (local-set-key (kbd "<tab>") 'completion-at-point)))
         (comint-mode . rm-comint-postoutput-scroll-to-bottom)
         (eshell-banner-load . (lambda () (setq eshell-banner-message "")))))
#+END_SRC

**** Shell
***** Make script executable on save
 Check for shebang magic in file after save, make executable if found.
 #+BEGIN_SRC emacs-lisp
   (use-package shell
     :preface
     (defvar my-shebang-patterns
       (list "^#!/usr/.*/perl\\(\\( \\)\\|\\( .+ \\)\\)-w *.*"
             "^#!/usr/.*/sh"
             "^#!/usr/.*/bash"
             "^#!/bin/sh"
             "^#!/bin/bash"))
     :hook (after-save . (lambda ()
                           (if (not (= (shell-command (concat "test -x " (buffer-file-name))) 0))
                               (progn
                                 ;; This puts message in *Message* twice, but minibuffer
                                 ;; output looks better.
                                 (message (concat "Wrote " (buffer-file-name)))
                                 (save-excursion
                                   (goto-char (point-min))
                                   ;; Always checks every pattern even after
                                   ;; match.  Inefficient but easy.
                                   (dolist (my-shebang-pat my-shebang-patterns)
                                     (if (looking-at my-shebang-pat)
                                         (if (= (shell-command
                                                 (concat "chmod u+x " (buffer-file-name)))
                                                0)
                                             (message (concat
                                                       "Wrote and made executable"
                                                       (buffer-file-name))))))))
                             ;; This puts message in *Message* twice, but minibuffer output
                             ;; looks better.
                             (message (concat "Wrote " (buffer-file-name)))))))
 #+END_SRC

***** TODO Clear buffer
***** TODO Hook to set environment variables in remote environments (e.g. ~PAGER~ to ~cat~ since shell doesn't handle curses programs well (e.g. ~less~))
**** Tramp
 #+BEGIN_SRC emacs-lisp
 (use-package tramp
   :preface
   (defun sudo-edit (&optional arg)
     "Edit currently visited file as ARG root.

  With a prefix ARG prompt for a file to visit.
  Will also prompt for a file to visit if current
  buffer is not visiting a file."
     (interactive "P")
     (if (or arg (not buffer-file-name))
         (counsel-find-file (concat "/sudo:root@localhost:"
                                    (read-file-name "Find file(as root): ")))
       (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))
   :config
   (customize-set-variable 'tramp-default-method "ssh")
   :bind ("C-x C-a" . sudo-edit))
 #+END_SRC

**** Doc view
     Doc-view-continuous
#+BEGIN_SRC emacs-lisp
(use-package doc-view
  :ensure nil
  :custom
  (doc-view-continuous t))
#+END_SRC

** Extensions
This contains all settings and applications that are fundamentally built on top of external applications.
*** Settings
**** Tabs: Bug report not-enabling :hook and :bind and doom-colors (active bar )are not set properly on server-client
Really only using this for grouping functionality (should make your own lol). Or create some kind of a margin mode that only margins out code and not text.
#+begin_src emacs-lisp
    (use-package centaur-tabs
      :ensure nil
      :load-path "~/.config/emacs/tabs"
      :config
      (setq centaur-tabs-style "bar"
            centaur-tabs-height 50
            centaur-tabs-set-icons nil
            centaur-tabs-set-modified-marker nil
            centaur-tabs-show-navigation-buttons nil)
      (centaur-tabs-headline-match)

      (setq centaur-tabs-gray-out-icons 'buffer)
      (setq centaur-tabs-cycle-scope 'tabs)
      (centaur-tabs-enable-buffer-reordering)
      (setq centaur-tabs-adjust-buffer-order t)

      (centaur-tabs-mode t)

      (setq uniquify-separator "/")
      (setq uniquify-buffer-name-style 'forward)
      (defun centaur-tabs-buffer-groups ()
        (list
         (cond
          ((memq major-mode '(eshell-mode
                              shell-mode
                              vterm-mode
                              term-mode))
           "Eshell")
          ((or (string-equal "*" (substring (buffer-name) 0 1))
               (memq major-mode '(magit-process-mode
                                  magit-status-mode
                                  magit-diff-mode
                                  magit-log-mode
                                  magit-file-mode
                                  magit-blob-mode
                                  magit-blame-mode
                                  )))
           "Emacs")
          ((derived-mode-p 'prog-mode)
           "Editing")
          ((derived-mode-p 'dired-mode)
           "Dired")
          ((memq major-mode '(helpful-mode
                              help-mode))
           "Help")
          ((memq major-mode '(org-mode
                              org-agenda-clockreport-mode
                              org-src-mode
                              org-agenda-mode
                              org-beamer-mode
                              org-indent-mode
                              org-bullets-mode
                              org-cdlatex-mode
                              org-agenda-log-mode
                              diary-mode))
           "OrgMode")
          (t
           (centaur-tabs-get-group-name (current-buffer))))))

      ;; Hack for now
      (bind-key "<C-tab>" 'centaur-tabs-forward)
      (bind-key "<C-iso-lefttab>" 'centaur-tabs-backward)
      (bind-key "C-c t s" 'centaur-tabs-counsel-switch-group)
      (bind-key "C-c t p" 'centaur-tabs-group-by-projectile-project)
      (bind-key "C-c t g" 'centaur-tabs-group-buffer-groups)
      ;; Hack for now
      ;; (add-hook 'dashboard-mode-hook 'centaur-tabs-local-mode)
      ;; (add-hook 'calendar-mode-hook 'centaur-tabs-local-mode)
      ;; (add-hook 'org-agenda-mode-hook 'centaur-tabs-local-mode)
      ;; (add-hook 'helpful-mode-hook 'centaur-tabs-local-mode)
  )
#+end_src

**** Modeline
***** Doom
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init
    (doom-modeline-mode)
    :custom
    (doom-modeline-icon t)
    (doom-modeline-major-mode-icon t)
    (doom-modeline-major-mode-color-icon nil)
    (doom-modeline-minor-modes nil)
    (doom-modeline-persp-name t)
    (doom-modeline-lsp t)
    (doom-modeline-github t)
    (doom-modeline-height 60)
    (doom-modeline-bar-width 8))
#+end_src

***** Minions
#+BEGIN_SRC emacs-lisp
(use-package minions
  :ensure t
  :init (minions-mode 1)
  :custom
  (minions-mode-line-lighter "#"))
#+END_SRC

**** Faces
#+begin_src emacs-lisp
  (use-package faces
    :ensure nil
    :defer t
    :preface
    (defvar duckonomy/font "Sarasa Mono H"
      "Main font")

    (defvar duckonomy/font-vp "Roboto"
      "Variable pitch font")

    (defvar duckonomy/font-kr "NanumBarunGothic"
      "Korean font")

    (defvar duckonomy/font-ch "Noto Sans CJK SC"
      "Chinese font")

    (defvar duckonomy/font-ja "Source Han Code JP" 
      "Japanese font")

    (defvar duckonomy/font-fallback "Courier New"
      "Fallback font")

    (defun duckonomy/use-font (&optional frame)
      "Set fonts with this."
      (when frame
        (select-frame frame))

      (set-face-attribute 'default nil
                          :weight 'bold
                          :height 150
                          :slant 'normal
                          :family duckonomy/font)

      (set-face-attribute 'fixed-pitch nil
                          :weight 'bold
                          :height 1.0
                          :slant 'normal
                          :family duckonomy/font)

      (set-face-attribute 'variable-pitch nil
                          :weight 'medium
                          :height 1.2
                          :slant 'normal
                          :family duckonomy/font-vp)

      (dolist (face '(org-block-begin-line
                      org-block-end-line))
        (set-face-attribute face nil
                            :weight 'bold))

      (set-fontset-font t 'hangul 
                        (font-spec 
                         :name duckonomy/font-kr
                         :weight 'bold))

      (set-fontset-font t 'chinese-gbk
                        (font-spec 
                         :family duckonomy/font-ch
                         :weight 'bold))

      (set-fontset-font t 'japanese-jisx0213.2004-1
                        (font-spec 
                         :family duckonomy/font-ja
                         :weight 'bold))

      (dolist (face '(font-lock-comment-delimiter-face
                      font-lock-comment-face))
        (set-face-attribute face nil :slant 'italic :weight 'medium)))

    (defun set-buffer-variable-pitch ()
      "Configurations that come with variable pitch."
      (interactive)
      (setq line-spacing 5)
      (variable-pitch-mode t))
    :init
    (if (daemonp)
        (progn
          (add-hook 'after-make-frame-functions
                    (lambda (frame)
                      (with-selected-frame frame
                        (duckonomy/use-font)))))
      (duckonomy/use-font))
    :hook (((org-mode eww-mode markdown-mode Info-mode) . set-buffer-variable-pitch))
    :custom
    (global-font-lock-mode t))
#+end_src

**** Theme
#+BEGIN_SRC emacs-lisp
  (use-package theme
    :ensure nil
    :defer t
    :load-path "themes"
    :preface
    (defun load-light-theme ()
      (interactive)
      (load-theme 'doom-solarized-light t))
    (defun load-dark-theme ()
      (interactive)
      (load-theme 'doom-gruvbox t))
    (defun load-wil-theme ()
      (interactive)
      (load-theme `wilmersdorf t))
    :init
    (add-to-list 'custom-theme-load-path "~/.config/emacs/themes")
    (load-dark-theme)
    :custom
    (doom-themes-enable-bold t)    ; if nil, bold is universally disabled
    (doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
    :config
    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+END_SRC

**** Buffers
***** COMMENT stripe-buffer
 Stripes dired buffers
 #+BEGIN_SRC emacs-lisp
 (use-package stripe-buffer
   :ensure t
   :commands stripe-buffer-mode
   :hook (dired-mode . stripe-buffer-mode))
 #+END_SRC

**** Icons
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :ensure t
  :custom
  (inhibit-compacting-font-caches t))
#+END_SRC

**** Text editing & Navigation
****** Evil
******* Evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :custom
    (evil-magic t)
    (evil-want-C-u-scroll t)
    (evil-ex-visual-char-range t)
    (evil-want-visual-char-semi-exclusive t)
    (evil-ex-search-vim-style-regexp t)
    (evil-ex-interactive-search-highlight 'selected-window)
    (evil-echo-state nil)
    (evil-ex-substitute-global t)
    (evil-insert-skip-empty-lines t)
    (evil-want-fine-undo nil)
    (evil-default-state 'emacs)
    :init
    (evil-mode 1)
    :hook (evil-insert-state-entry . evil-ex-nohighlight)
    :config
    (with-eval-after-load 'evil-maps
      ;; UNSAFE
      (define-key evil-motion-state-map (kbd ":") 'evil-ex)
      ;; UNSAFE
      (define-key evil-motion-state-map (kbd ";") 'evil-ex)
      ;; UNSAFE
      (define-key evil-normal-state-map (kbd "SPC") 'avy-goto-word-or-subword-1)
      ;; UNSAFE
      (define-key evil-visual-state-map (kbd "SPC") 'avy-goto-word-or-subword-1))
    (evil-set-initial-state 'prog-mode 'normal)
    (evil-set-initial-state 'sgml-mode 'normal)
    (evil-select-search-module 'evil-search-module 'evil-search))
#+END_SRC

******* Evil-commentary
#+BEGIN_SRC emacs-lisp
(use-package evil-commentary
  :ensure t
  :commands (evil-commentary evil-commentary-yank evil-commentary-line)
  :init (evil-commentary-mode 1))
#+END_SRC

******* Evil-surround
#+BEGIN_SRC emacs-lisp
(use-package evil-surround
  :ensure t
  :commands (global-evil-surround-mode
             evil-surround-edit
             evil-Surround-edit
             evil-surround-region)
  :config
  (global-evil-surround-mode 1))
#+END_SRC

****** Avy
#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :bind
  ("C-:" . avy-goto-char)
  ("M-g i" . avy-goto-char)
  ("M-g o" . avy-goto-char-2)
  ("M-g f" . avy-goto-line)
  ("M-g w" . avy-goto-word-1)
  ("M-g e" . avy-goto-word-0))
#+END_SRC

****** Expand
******* expand-region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind
    ("C-\\" . er/expand-region)
    ("C-|" . er/contract-region))
#+END_SRC

******* hippie-expand
#+BEGIN_SRC emacs-lisp
  (use-package  hippie-exp
    :ensure nil
    :bind
    ("C-M-|" . hippie-expand))
#+END_SRC

****** Anzu
#+BEGIN_SRC emacs-lisp
  (use-package anzu
    :ensure t
    :diminish anzu-mode
    :init
    (global-anzu-mode +1)
    :custom
    (anzu-cons-mode-line-p nil)
    :bind (([remap query-replace-regexp] . anzu-query-replace-regexp)
           ([remap query-replace] . anzu-query-replace)
           :map isearch-mode-map
           ([remap isearch-query-replace] . anzu-isearch-query-replace)
           ([remap isearch-query-replace]. anzu-isearch-query-replace-regexp)))
#+END_SRC

****** Undo tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :diminish undo-tree-mode
    :config
    (progn
      (global-undo-tree-mode 1)
      (defalias 'redo 'undo-tree-redo)
      (defalias 'undo 'undo-tree-undo))
    :bind (("C-/" . undo)
           ("C-S-/" . redo)
           ("C-?" . redo)
           ("C-z" . undo)
           ("C-S-z" . redo)
           ("C-x u" . undo)))
#+END_SRC

****** Multiple cursors
Have to set up other mc commands (not just set ha ha)
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :bind (("C-S-c C-S-c" . mc/edit-lines )
           ("C->" . mc/mark-next-like-this )
           ("C-<" . mc/mark-previous-like-this )
           ("C-M-<" . mc/mark-all-like-this )))
#+END_SRC

****** Delimeters
******* Smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :init
    (smartparens-global-mode 1))
#+END_SRC

******* Rainbow-delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :commands rainbow-delimiters-mode
    :custom
    (rainbow-delimiters-max-face-count 3)
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

****** Whitespace
#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :ensure nil
    :preface
    (defun clean-white ()
      "Clean white."
      (add-hook 'before-save-hook #'whitespace-cleanup nil t))

    (defun clean-trail ()
      "Clean trail."
      (add-hook 'before-save-hook #'delete-trailing-whitespace nil t))
    :hook ((prog-mode sgml-mode) . clean-white))
#+END_SRC

****** Custom Editing
#+BEGIN_SRC emacs-lisp
  (use-package editing
    :ensure nil
    :defer t
    :preface
    (defun backward-kill-line (arg)
      "Kill ARG lines backward."
      (interactive "p")
      (kill-line (- 1 arg)))
    :bind (("C-S-k" . 'backward-kill-line)
           ("C-x <deletechar>" . backward-kill-sentence)
           ("M-K" . backward-kill-sentence)
           ("C-S-M-k" . backward-kill-sexp)))
#+END_SRC

**** TODO Buffer Management
#+begin_src emacs-lisp
  (use-package buffer-management
    :ensure nil
    :defer t)
#+end_src

**** Window Management
***** Basic
#+BEGIN_SRC emacs-lisp
  (use-package window-management
    :ensure nil
    :defer t
    :preface
    (defun prev-window ()
      "Previous window."
      (interactive)
      (other-window -1))
    :bind (("C-x O" . prev-window)
           ("C-x w" . kill-this-buffer)
           ("C-x M-k" . kill-this-buffer)
           ("C-x K" . kill-this-buffer)
           ("C-M-{" . shrink-window-horizontally)
           ("C-M-}" . enlarge-window-horizontally)
           ("C-M-^" . enlarge-window)))
#+END_SRC

***** Ace-window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :preface
    (defvar aw-dispatch-alist
      '((?x aw-delete-window "Delete Window")
        (?m aw-swap-window "Swap Windows")
        (?M aw-move-window "Move Window")
        (?c aw-copy-window "Copy Window")
        (?j aw-switch-buffer-in-window "Select Buffer")
        (?n aw-flip-window)
        (?u aw-switch-buffer-other-window "Switch Buffer Other Window")
        (?c aw-split-window-fair "Split Fair Window")
        (?v aw-split-window-vert "Split Vert Window")
        (?b aw-split-window-horz "Split Horz Window")
        (?o delete-other-windows "Delete Other Windows")
        (?? aw-show-dispatch-help)))
    ;; UNSAFE (Enrich text)
    :bind ("M-o" . ace-window)
    :custom
    (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    :config
    (set-face-attribute 'aw-leading-char-face nil
                        :weight 'bold
                        :foreground "#CC6666"
                        :height 3.0))
#+END_SRC

**** File & Project Management
***** hl-todo
 Highlight TODOs
 #+BEGIN_SRC emacs-lisp
   (use-package hl-todo
     :ensure t
     :config
     (global-hl-todo-mode 1))
 #+END_SRC

***** Treemacs
#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :config
    (progn
      (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay      0.5
            treemacs-directory-name-transformer    #'identity
            treemacs-display-in-side-window        t
            treemacs-eldoc-display                 t
            treemacs-file-event-delay              5000
            treemacs-file-extension-regex          treemacs-last-period-regex-value
            treemacs-file-follow-delay             0.2
            treemacs-file-name-transformer         #'identity
            treemacs-follow-after-init             t
            treemacs-git-command-pipe              ""
            treemacs-goto-tag-strategy             'refetch-index
            treemacs-indentation                   2
            treemacs-indentation-string            " "
            treemacs-is-never-other-window         nil
            treemacs-max-git-entries               5000
            treemacs-missing-project-action        'ask
            treemacs-no-png-images                 nil
            treemacs-no-delete-other-windows       t
            treemacs-project-follow-cleanup        nil
            treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                      'left
            treemacs-recenter-distance             0.1
            treemacs-recenter-after-file-follow    nil
            treemacs-recenter-after-tag-follow     nil
            treemacs-recenter-after-project-jump   'always
            treemacs-recenter-after-project-expand 'on-distance
            treemacs-show-cursor                   nil
            treemacs-show-hidden-files             t
            treemacs-silent-filewatch              nil
            treemacs-silent-refresh                nil
            treemacs-sorting                       'alphabetic-asc
            treemacs-space-between-root-nodes      t
            treemacs-tag-follow-cleanup            t
            treemacs-tag-follow-delay              1.5
            treemacs-width                         35)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode t)
      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple))))
    :bind
    ;; UNSAFE
    ("M-0"       . treemacs-select-window)
    ("C-x t 1"   . treemacs-delete-other-windows)
    ("C-x t t"   . treemacs)
    ("C-x t B"   . treemacs-bookmark)
    ("C-x t C-t" . treemacs-find-file)
    ("C-x t M-t" . treemacs-find-tag))

  (use-package treemacs-evil
    :after treemacs evil
    :ensure t)

  (use-package treemacs-projectile
    :after treemacs projectile
    :ensure t)

  (use-package treemacs-icons-dired
    :after treemacs dired
    :ensure t
    :config (treemacs-icons-dired-mode))

  (use-package treemacs-magit
    :after treemacs magit
    :ensure t)
#+end_src

***** Bookmarks
Default bookmark file & save bookmark at every save
#+begin_src emacs-lisp
(use-package bookmark
  :ensure nil
  :custom
  (bookmark-default-file "~/.config/emacs/bookmarks")
  (bookmark-save-flag 1))
#+end_src

***** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :init 
    (projectile-mode +1)
    :config
    (with-eval-after-load 'projectile
      (setq projectile-project-root-files-top-down-recurring
            (append '("compile_commands.json"
                      ".cquery")
                    projectile-project-root-files-top-down-recurring))))
#+END_SRC

**** Menu system
***** Ivy
****** Ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy 
    :ensure t
    :diminish (ivy-mode . "") ; does not display ivy in the modeline
    :preface
    (defun my-ivy-switch-buffer (regex-list)
      "Ivy switch Buffer REGEX-LIST."
      (let ((ivy-ignore-buffers regex-list))
        (ivy-switch-buffer)))

    (defun my-show-only-irc-buffers ()
      "Show only irc buffers."
      (interactive)
      (my-ivy-switch-buffer '("^[^#]")))

    (defun my-also-ignore-star-buffers ()
      "Ignore everything starting with a star along with whatever ivy's defaults are."
      (interactive)
      (my-ivy-switch-buffer (append ivy-ignore-buffers `("^\*"))))
    :init (ivy-mode 1)        ; enable ivy globally at startup
    :custom
    (counsel-find-file-ignore-regexp
     (concat
      ;; File names beginning with # or .
      "\\(?:\\`[#.]\\)"
      ;; File names ending with # or ~
      "\\|\\(?:\\`.+?[#~]\\'\\)"))
    (ivy-use-virtual-buffers t)   ; extend searching to bookmarks and …
    (ivy-height 20)               ; set height of the ivy window
    (ivy-count-format "(%d/%d) ") ; count format, from the ivy help page
    (ivy-display-style 'fancy)
    (ivy-wrap t)
    :config
    ;; for light themes
    ;; (set-face-attribute 'ivy-current-match nil
    ;;                     :background "#3E4451")

    :bind (("C-x M-b" . my-also-ignore-star-buffers)
           :map ivy-minibuffer-map
           ("C-l" . counsel-up-directory)
           ("C-'" . ivy-avy)
           ("<C-m>" . ivy-done)))
#+END_SRC

****** COMMENT ivy-posframe [meh for now]
#+BEGIN_SRC emacs-lisp
(use-package ivy-posframe
  :ensure t
  :init
  (ivy-posframe-mode 1)
  :custom
  (ivy-posframe-hide-minibuffer t)
  (ivy-posframe-parameters
        '((left-fringe . 10)
          (right-fringe . 10)))
  (ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center))))
#+END_SRC

****** COMMENT ivy-xref
#+BEGIN_SRC emacs-lisp
(use-package ivy-xref
  :ensure t
  :custom
  (xref-show-xrefs-function #'ivy-xref-show-xrefs))
#+END_SRC

***** Counsel
****** Smex
This is for additional functionality
#+BEGIN_SRC emacs-lisp
(use-package smex
  :ensure t)
#+END_SRC

****** Counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel :ensure t
    :bind*
    (("M-x"     . counsel-M-x)
     ("C-x C-f" . counsel-find-file)
     ("C-x C-r" . counsel-recentf)
     ("C-c f"   . counsel-git)
     ("C-c s"   . counsel-git-grep)
     ("C-c /"   . counsel-ag)
     ("C-c z"   . counsel-fzf)
     ("C-c l"   . counsel-locate))
    :custom
    (counsel-find-file-ignore-regexp (regexp-opt '("." ".."))) ; Need for Dired
    (counsel-find-file-ignore-regexp (regexp-opt completion-ignored-extensions)))
#+END_SRC

****** Counsel-etags
****** Counsel-projectile
#+BEGIN_SRC emacs-lisp
(use-package counsel-projectile
  :ensure t
  :init (counsel-projectile-mode 1)
  :bind (:map projectile-mode-map
         ("C-c p" . projectile-command-map)))
#+END_SRC

***** Swiper
#+BEGIN_SRC emacs-lisp
(use-package swiper
  :ensure t
  :preface
  (defun bjm-swiper-recenter (&rest args)
    "Recenter display after swiper ARGS."
    (recenter))
  :bind
  ("C-S-s" . swiper)
  :config
  ;; advise swiper to recenter on exit
  (advice-add 'swiper :after #'bjm-swiper-recenter))
#+END_SRC

***** FZF
#+begin_src emacs-lisp
  (use-package "fzf" 
    :ensure nil
    :init (setenv "FZF_DEFAULT_COMMAND" "fd --type f")
    :config)
#+end_src

**** Keybindings
***** Bind-key
https://emacs.stackexchange.com/questions/7832/how-to-bind-c-for-real
#+BEGIN_SRC emacs-lisp
  (use-package bind-key
    :ensure t
    :preface
    (defun duckonomy/keys-decode (&optional frame)
      "Decode archaic ASCII keyboard conventions for better use."
      (when frame
        (select-frame frame))
      ;; Bound to angle brackets because Meta commands not recognized if not.
      (define-key input-decode-map (kbd "C-[") (kbd "<C-[>"))
      (define-key input-decode-map (kbd "C-i") (kbd "<C-i>"))
      (define-key input-decode-map (kbd "C-m") (kbd "<C-m>")))
    :init
    (if (daemonp)
        (progn
          (add-hook 'after-make-frame-functions
                    (lambda (frame)
                      (with-selected-frame frame
                        (duckonomy/keys-decode)))))
      (duckonomy/keys-decode))
    :config
    (bind-key "C-S-g" 'abort-recursive-edit)
    ;; UNSAFE in terminal
    ;; (bind-key* "<C-[>" 'butterfly)
    ;; UNSAFE in terminal
    ;; (bind-key* "<C-i>" 'butterfly)
    ;; UNSAFE in terminal
    ;; (bind-key* "<C-m>" 'butterfly)
    (bind-key* "C-+" 'text-scale-increase)
    ;; SEMI-SAFE (Duplicate undo)
    (bind-key* "C-_" 'text-scale-decrease)
    (bind-key* "C-c =" 'text-scale-increase)
    (bind-key* "C-c -" 'text-scale-decrease)
    (bind-key* "C-c 0" 'text-scale-adjust)
    (bind-key "C-S-h" 'mark-defun)
    (bind-key "RET" 'newline-and-indent)
    (bind-key "C-;" 'comment-line))
#+END_SRC

**** Tooltip
#+begin_src emacs-lisp
  (use-package pos-tip
    :ensure t
    :custom
    (pos-tip-internal-border-width 6)
    (pos-tip-border-width 1))
#+end_src

**** Correction
***** Flyspell
Not using it because in org “c-<” maps to something else
TODO: Make hook to disable on larger org files like this one, or maybe just specific files
#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :hook ((org-mode text-mode). flyspell-mode))
#+END_SRC

***** Flycheck
****** flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :diminish ""
  :commands (global-flycheck-mode)
  :init
  (add-hook 'after-init-hook #'global-flycheck-mode)
  :custom
  (flycheck-check-syntax-automatically '(mode-enabled save)))
#+END_SRC

****** flycheck-pos-tip
#+BEGIN_SRC emacs-lisp
(use-package flycheck-pos-tip
  :ensure t
  :init
  (with-eval-after-load 'flycheck
    (flycheck-pos-tip-mode)))
#+END_SRC

****** COMMENT flycheck-inline
#+BEGIN_SRC emacs-lisp
(use-package flycheck-inline
  :ensure t
  :init
  (with-eval-after-load 'flycheck
    (global-flycheck-inline-mode)))
#+END_SRC

**** Completion
***** Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish ""
    :preface
    (defun company-yasnippet-or-completion ()
      "Solve company yasnippet conflicts."
      (interactive)
      (let ((yas-fallnback-behavior
             (apply 'company-complete-common nil)))
        (yas-expand)))
    :hook (((prog-mode comint-mode) . company-mode)
           (company-mode . (lambda ()
                             (substitute-key-definition
                              'company-complete-common
                              'company-yasnippet-or-completion
                              company-active-map))))

    :custom
    (company-tooltip-limit 20)
    (company-idle-delay 0)
    (company-minimum-prefix-length 1)
    (company-echo-delay 0)
    (company-require-match nil)
    (company-selection-wrap-around t)
    (company-tooltip-align-annotations t)
    ;; weight by frequency
    (company-transformers '(company-sort-by-occurrence))
    :bind (:map company-active-map 
                ("M-n" . nil)
                ("M-p". nil)
                ("C-n" . company-select-next)
                ("C-p" . company-select-previous)
                ("TAB" . company-complete-common-or-cycle)
                ("<tab>" . company-complete-common-or-cycle)
                ("S-TAB" . company-select-previous)
                ("<backtab>" . company-select-previous)))
#+END_SRC

***** TODO COMMENT Company-posframe
Too laggy for now. Mouse disappearing. Screen size bug. Make it more pretty
#+begin_src emacs-lisp
  (use-package company-posframe
    :ensure t
    :config
    (company-posframe-mode 1))
#+end_src

***** Yasnippets
****** Yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :diminish ""
    :ensure t
    :preface
    (defvar company-mode/enable-yas t
      "Enable yasnippet for all backends.")
    (defun company-mode/backend-with-yas (backend)
      "Yasnippet backends BACKEND."
      (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
          backend
        (append (if (consp backend) backend (list backend))
                '(:with company-yasnippet))))
    :init
    (yas-global-mode 1)
    :requires company
    :custom
    (company-backends (mapcar #'company-mode/backend-with-yas company-backends))
    :bind (:map yas-minor-mode-map 
                ("C-c k" . yas-expand)))
#+END_SRC

****** Snippets
#+BEGIN_SRC emacs-lisp
(use-package yasnippet-snippets
  :ensure t)
#+END_SRC

**** Languages
***** Language Server Protocol
****** New lsp mode
 #+BEGIN_SRC emacs-lisp
   (use-package lsp-mode
     :hook (prog-mode . lsp)
     :commands lsp)

   ;; optionally
   (use-package lsp-ui :commands lsp-ui-mode)
   ;; (use-package helm-lsp :commands helm-lsp-workspace-symbol)
   (use-package lsp-treemacs :commands lsp-treemacs-errors-list)
   ;; optionally if you want to use debugger
   (use-package dap-mode)
   ;; (use-package dap-LANGUAGE) to load the dap adapter for your language
 #+END_SRC

****** COMMENT lsp-mode
 #+BEGIN_SRC emacs-lisp
 (use-package lsp-mode
   ;; :commands lsp
   :ensure t
   :hook ((prog-major-mode . lsp-prog-major-mode-enable)
          (lsp-after-open-hook . lsp-enable-imenu)
          (prog-mode . lsp))
   :custom
   (lsp-inhibit-message nil)
   (lsp-eldoc-render-all nil)
   (lsp-highlight-symbol-at-point nil))
 #+END_SRC

****** COMMENT lsp-ui
 #+BEGIN_SRC emacs-lisp
 (use-package lsp-ui
   ;; :commands lsp-ui-mode
   :ensure t
   :hook (lsp-mode . lsp-ui-mode)
   :config
   (lsp-ui-sideline-enable t)
   (lsp-ui-sideline-show-symbol t)
   (lsp-ui-sideline-show-hover t)
   (lsp-ui-sideline-show-code-actions t)
   (lsp-ui-sideline-update-mode 'point))
 #+END_SRC

****** company-lsp
 #+BEGIN_SRC emacs-lisp
 (use-package company-lsp
   :commands company-lsp
   :ensure t
   :custom
   (company-lsp-enable-recompletion t)
   (company-transformers nil)
   (company-lsp-async t)
   (company-lsp-cache-candidates nil)
   :config
   (add-to-list 'company-backends
                'company-lsp))
 #+END_SRC

***** Go
#+begin_src emacs-lisp
  (use-package go-mode
    :ensure t
    :hook (go-mode . lsp-deferred))
#+end_src

***** COMMENT Rainbow-identifiers-mode
Should disable this in html (sgml)
 #+BEGIN_SRC emacs-lisp
   (use-package rainbow-identifiers
     :ensure t
     :hook (prog-mode . rainbow-identifiers-mode))
 #+END_SRC

***** C/C++
****** cquery
 #+BEGIN_SRC emacs-lisp
 (use-package cquery
   :ensure t
   :commands lsp
   :preface
   (defun cquery//enable ()
     "Cquery enable."
     (condition-case nil (lsp) (user-error nil)))
   :custom
   (cquery-executable "/usr/bin/cquery")
   :hook 
   ((c-mode c++-mode) . cquery//enable))
 #+END_SRC

****** ff-find-other-file
 #+BEGIN_SRC emacs-lisp
   (use-package find-file
     :ensure nil
     ;; UNSAFE (And don't know what this does)
     ;; (bind-key* "C-M-o" 'ff-find-other-file)
     ;; UNSAFE (And don't know what this does)
     :bind ("C-c o" . ff-find-other-file))
 #+END_SRC

****** COMMENT c font-lock
 #+BEGIN_SRC emacs-lisp
 (use-package font-lock
   :ensure nil
   :config
   (font-lock-add-keywords 'c-mode
                           '(("\\(\\w+\\)\\s-*\("
                              (1 rumpsteak-font-lock-function-call-face)))
                           t))
 #+END_SRC

****** c++-font-lock
 #+BEGIN_SRC emacs-lisp
 (use-package modern-cpp-font-lock
   :ensure t
   :init
   (modern-c++-font-lock-global-mode t))
 #+END_SRC

***** Web
****** HTML/CSS
******* emmet-mode
Make work with tab
 #+BEGIN_SRC emacs-lisp
   (use-package emmet-mode
     :ensure t
     :hook ((sgml-mode . emmet-mode)
            (css-mode . emmet-mode)))
 #+END_SRC

******* Rainbow-mode
 #+BEGIN_SRC emacs-lisp
 (use-package rainbow-mode
   :ensure t
   :hook ((css-mode html-mode sass-mode) . rainbow-mode))
 #+END_SRC

****** JS
******* TODO js-mode
Does not work... have to manually enable this inside html script tag
#+begin_src emacs-lisp
  (use-package js-mode
    :ensure nil
    :hook ((js-mode . lsp)))
#+end_src

******* js2-mode
Just use as minor-mode.
 #+BEGIN_SRC emacs-lisp
   (use-package js2-mode
     :ensure t
     :hook ((js-mode . js2-minor-mode)))
 #+END_SRC

******* Tide
#+begin_src emacs-lisp
 (use-package tide
   :ensure t
   :preface
   (defun setup-tide-mode ()
     "Tide-mode setup."
     (interactive)
     (tide-setup)
     (lsp-mode nil)
     (lsp-mode -1)
     (flycheck-mode +1)
     (setq flycheck-check-syntax-automatically '(save mode-enabled))
     (eldoc-mode +1)
     (tide-hl-identifier-mode +1)
     (company-mode +1))
   :hook ((typescript-mode . setup-tide-mode)
          (js-mode . setup-tide-mode)
          (vue-mode . setup-tide-mode)
          (vue-html-mode . setup-tide-mode)
          (before-save-hook . tide-format-before-save))
   :custom
   (company-tooltip-align-annotations t))
#+end_src

******* Vue
 #+BEGIN_SRC emacs-lisp
 (use-package vue-mode
   :ensure t)

 (use-package vue-html-mode
   :ensure t)
 #+END_SRC

******* prettier
 #+BEGIN_SRC emacs-lisp
 (use-package prettier-js
   :ensure t
   :hook ((js2-mode web-mode) . prettier-js-mode)
   :custom
   (prettier-js-args '("--trailing-comma" "none"
                       "--parser" "flow"
                       "--semi" "false"
                       "single-quote" "true")))
 #+END_SRC

******* eslint
 #+BEGIN_SRC emacs-lisp
 (use-package eslint-fix
   :ensure t
   :init
   (eval-after-load 'js2-mode
     '(add-hook 'js2-mode-hook (lambda () (add-hook 'after-save-hook 'eslint-fix nil t)))))
 #+END_SRC

***** Markdown
 #+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :custom 
    (markdown-command "multimarkdown"))
 #+END_SRC

***** LaTeX
https://nasseralkmim.github.io/notes/2016/08/21/my-latex-environment/
****** Auctex
 #+BEGIN_SRC emacs-lisp
   (use-package tex-site
     :ensure auctex
     :mode ("\\.tex\\'" . latex-mode)
     :custom
     (TeX-auto-save t)
     (TeX-parse-self t)
     (TeX-save-query nil)
     (TeX-PDF-mode t)
     (TeX-master nil) 
     (TeX-view-program-selection '((output-pdf "pdf-tools"))
                                 TeX-source-correlate-start-server t)
     (TeX-view-program-list '(("pdf-tools" "TeX-pdf-tools-sync-view")))
     :config
     :hook ((LaTex-mode . (lambda ()
                            (rainbow-delimiters-mode)
                            (company-mode)
                            (smartparens-mode)
                            (turn-on-reftex)
                            (setq reftex-plug-into-AUCTeX t)
                            (reftex-isearch-minor-mode)
                            (setq TeX-PDF-mode t)
                            (setq TeX-source-correlate-method 'synctex)
                            (setq TeX-source-correlate-start-server t)))
            (TeX-after-Tex-LaTeX-command-finished . Tex-revert-document-buffer)
            (LaTeX-mode . pdf-tools-install)))
 #+END_SRC

****** Reftex
#+begin_src emacs-lisp
(use-package reftex
  :ensure t
  :defer t
  :custom
  (reftex-cite-prompt-optional-args t))
#+end_src

****** ivy-bibtex
#+begin_src emacs-lisp
(use-package ivy-bibtex
  :ensure t
  :bind ("C-c b b" . ivy-bibtex)
  :custom
  (bibtex-completion-bibliography 
        '("C:/Users/Nasser/OneDrive/Bibliography/references-zot.bib"))
  (bibtex-completion-library-path 
        '("C:/Users/Nasser/OneDrive/Bibliography/references-pdf"
          "C:/Users/Nasser/OneDrive/Bibliography/references-etc"))
  ;; using bibtex path reference to pdf file
  (bibtex-completion-pdf-field "File")
  ;;open pdf with external viwer foxit
  (bibtex-completion-pdf-open-function
        (lambda (fpath)
          (call-process "C:\\Program Files (x86)\\Foxit Software\\Foxit Reader\\FoxitReader.exe" nil 0 nil fpath)))
  (ivy-bibtex-default-action 'bibtex-completion-insert-citation))
#+end_src

***** XML
 #+BEGIN_SRC emacs-lisp
 (use-package nxml-mode
   :ensure nil
   :mode
   (("\\.csproj\\'" . nxml-mode)))
 #+END_SRC

***** OpenGL
 #+BEGIN_SRC emacs-lisp
 (use-package company-glsl
   :ensure t)

 (use-package glsl-mode
   :ensure t)
 #+END_SRC

*** Applications
**** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t)
#+END_SRC

**** Vterm
Config so that there are bindings to ~C-q~
#+BEGIN_SRC emacs-lisp
  (use-package vterm
    :ensure t
    ;; UNSAFE
    :bind (:map vterm-mode-map 
                ("M-o" . ace-window)))
#+END_SRC

**** Notmuch
***** notmuch
 #+BEGIN_SRC emacs-lisp
 (use-package notmuch
   :ensure t
   :custom
   (user-full-name "Ian Park")
   (user-mail-address "contact@duckonomy.com")
   (mail-user-agent 'message-user-agent)
   (mail-specify-envelope-from t)
   (sendmail-program "/usr/bin/msmtp"
             mail-specify-envelope-from t
             mail-envelope-from 'header
             message-sendmail-envelope-from 'header))
 #+END_SRC

***** counsel-notmuch
 #+BEGIN_SRC emacs-lisp
 (use-package counsel-notmuch
   :ensure t)
 #+END_SRC

**** Pdf-tools
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t
    :mode ("\\.pdf\\'" . pdf-tools-install)
    :defer t
    :preface
    (defun my/scroll-other-window ()
      "Scroll other window up."
      (interactive)
      (let* ((wind (other-window-for-scrolling))
             (mode (with-selected-window wind major-mode)))
        (if (eq mode 'pdf-view-mode)
            (with-selected-window wind
              (pdf-view-next-line-or-next-page 2))
          (scroll-other-window 2))))

    (defun my/scroll-other-window-down ()
      "Scroll other window down."
      (interactive)
      (let* ((wind (other-window-for-scrolling))
             (mode (with-selected-window wind major-mode)))
        (if (eq mode 'pdf-view-mode)
            (with-selected-window wind
              (progn
                (pdf-view-previous-line-or-previous-page 2)
                (other-window 1)))
          (scroll-other-window-down 2))))
    :bind
    ("C-M-S-v" . my/scroll-other-window-down)
    ("C-M-v" . my/scroll-other-window)
    ("C-x C-g" . pdf-sync-forward-search)
    :init
    (pdf-tools-install)
    :custom
    (mouse-wheel-follow-mouse t)
    (pdf-view-resize-factor 1.10))
#+END_SRC

**** Writeroom-mode
#+BEGIN_SRC emacs-lisp
(use-package writeroom-mode
  :ensure t)
#+END_SRC

**** Typo-mode
Don't hook to text-mode because it messes up quotes in org-mode. Only use on demand. (or create a prose major mode)
#+BEGIN_SRC emacs-lisp
(use-package typo
  :ensure t)
#+END_SRC

**** Ledger-mode
#+begin_src emacs-lisp
(use-package ledger-mode
  :ensure t)
#+end_src

** Footer
#+BEGIN_SRC emacs-lisp
;;; README.el ends here
#+END_SRC

* Dependencies [ Manage separately ]
** Language Servers
*** Cquery
*** Python-Language-Server
*** Bingo
*** RLS
*** Vue language server
*** typescript-language-server/typescript (both js and typescript)
** Vterm
** pdf-tools
** LaTeX
** Notmuch
 - mbsync
 - msmtp
** password-store
** ~mlocate~ (for ~locate~)
** ~fzf~ (for ~counsel-fzf~)
** ~ag~ (for ~counsel-ag~)

* Roadmap
** External
*** NixOS Overlay?
 - https://github.com/jwiegley/nix-config/blob/master/overlays/10-emacs.nix
*** Literate Emacs Website on https://duckonomy.com
 - https://github.com/WolfeCub/dotfiles/tree/master/emacs/.emacs.d
*** Switch Left mod in Xkeyboard to right mod (to make it real )
+Things like ~C-M-h~ do not work right now+
Seems to be something deeper lol  xkeyboard fix doesn't work either
** Internal
*** Themes
 - https://daylerees.github.io/
*** Flyspell pos-tip
*** Debugging
*** Emacs mode for prose
https://tonyballantyne.com/EmacsWritingTips.html
**** Muse
**** Writegood mode
 - http://bnbeckwith.com/code/writegood-mode.html
**** Proselint
 - http://proselint.com/
**** Fountain mode
**** DONE Writeroom mode
*** https://github.com/noctuid/general.el#general-examples
*** DONE Make typo mode disabled in org code block
*** DONE Tabs in org-mode
*** Get rid of Doom
*** Dimmer.el https://github.com/gonewest818/dimmer.el
*** Secret keys
load lazy(per app basis [not init]) and make it work with password-store
Use EPA
*** ~ivy-postframe~ integration
*** Reload Emacs Daemon on save
*** Get rid of all non-default keybindings and create keychords on top
*** Chording/Modality
 - https://github.com/noctuid/dotfiles/blob/master/emacs/editing.org#why-not-kakoune
 - https://github.com/abo-abo/hydra
 - https://github.com/abo-abo/worf
 - https://github.com/abo-abo/lispy
*** Parentheses (lispy/parinfer - maybe paredit???)
*** Learn Emacs Correctly (including legacy bindings)
*** Language Specific Indentation/Spaces
 - C/C++/Java/Go
 - Javascript/HTML/CSS
 - Python
*** Refactor
 - Separate GUI Configs from regular settings so guis are immutable in some sense(rather there is a clear delineation)
 - So that I can load only the strictly cli-compatiable stuff on emacs -nw
*** Regex
 - Just learn haha
*** Subword modules support
 - camel case aware
 - lisp aware
*** Debugging interface
*** Better Modeline [2/2]
 - DONE Setup Github Branch [DOOM-modeline]
 - DONE Setup Flycheck errors [DOOM-modeline]
 - Pretty
 - Functional (Lazy)
 - Tramp support
 - Make loading when daemon seamless
*** Dotemacs Babel build only on trigger (not on save) and async
 - https://github.com/astahlman/ob-async
*** Optimization
 - Startup Profiler https://github.com/jschaf/esup
 - and symon
 - Make regular emacs launch as fast
 - remove possible bottlenecks
 - remove blocking issues
*** Make work in Linux/Mac/Windows
**** Directories and Dependencies (e.g. ~/Documents)
*** Secure keys handling
 - IRC (SASL)
 - Password manager
 - Lazy loading
*** Split readme.org into smaller files
 - Indexing? in main elc (maybe just seqentially) like when you need to edit a single file that is at the bottom part of the whole config how do you insert that?
 - Maybe just logical splitting
*** Better m-x
 - https://www.reddit.com/r/emacs/comments/ehjcu2/screenshot_polishing_my_emacs_who_said_an_old/
*** Conditional Binary Compilation/External Acts and fallback
 - pdf-tools (fallback docview)
 - vterm
 - Language Servers
*** Better buffer management
 - Cycle through similar buffers(multi-term with terminals, eshell with eshell)
 - Tabs? (centaur-tabs)
 - https://github.com/waymondo/frog-jump-buffer
 - Name terminals as unique buffers
 - Better Ctrl-tab
   - cycle within related buffers
     - terminals with terminals
     - text buffers with text buffers
     - dired with dired
     - error/messages with other messages
     - blacklists
 - Better kill buffer mechanism
   - map rotation to c-r because c-s is ~swiper~ - don't know why?****** TODO map kill to c-q
   - After kill, go to related buffer
 - Fix kill-them-buffers
   - make it kill frame on last tab
   - or make a base buffer
   - logic to make sole buffers remain even when kill when duplicate
*** Better Window Manager
 - Resize/Move
 - Ace Window (See Under # Applications)
 - If window is sole window don't kill but just close buffer else kill buffer and close window [How to get number of user windows]
*** Hydra
** Applications
*** Rectangle
*** Eldoc
*** Org-ledger/Ledger mode
*** Org
 - Setup org agenda and capture
   - https://www.youtube.com/watch?v=QQSaDDVP__s
   - https://www.youtube.com/watch?v=KdcXu_RdKI0
   - https://www.youtube.com/watch?v=7ybg3vjLQJM
 - org-note
   - https://sachachua.com/blog/2015/02/learn-take-notes-efficiently-org-mode/
 - Refile https://orgmode.org/manual/Refile-and-copy.html
 - https://blog.aaronbieber.com/2017/03/19/organizing-notes-with-refile.html
 - Effort https://www.gnu.org/software/emacs/manual/html_node/org/Effort-estimates.html
 - various org aliases and functions to improve workflow
 - Set up for papers
   - org-ref
*** Parinfer/Paredit/Lispy
 - Setup and keybindings
*** Disable Evil by default
*** Magit
*** ERC/CIRCE
 - Make it pretty
 - https://github.com/hlissner/doom-emacs/issues/103
 - Ivy for buffer/sever switch
*** Notmuch/Gnus
 - Make it pretty
 - Gnu config
 - Set up emacs/notmuch/msmtp/mbsync(isync)/gnus
 - Set up with custom mail server
 - Make gnus asynchronous
*** TRAMP
*** Ivy/Counsel
 - ivy buffer that hides unecessary stuff
*** Elfeed (rss)
*** Flycheck or flymake
 - Setup keybindings
*** Ace-window
 - Setup and keybindings (not much really todo??? not sure why this was a thing)
 - Bug when fonts get large
*** Eshell
 - Better tramp support
*** Vterm
 - Tramp support https://github.com/jixiuf/vterm-toggle
** Appearance
*** Colors
 - Make them work with terminal colors
*** Custom theme
*** Good looking
 - https://www.reddit.com/r/unixporn/comments/8g2n6e/exwm_emacs_everything/
** Application Development
*** LSP
 - Make overlays seamless
 - Learn basic keys
 - Fix lsp-ui so that it is simpler
*** Web
 - Web-beautify
 - Emacs 27
 - Make emmet a hook to web-mode
*** Clojure 
 - https://www.nongnu.org/geiser/
 - Cider
*** Common Lisp
 - Slime
*** Scala
 - Ensime
*** R 
 - ESS
*** Haskell
*** Java
*** PHP
*** Matlab
*** Erlang
*** Swift
*** Ruby
*** Assembly and Hex
*** Perl
*** Groovy
*** Kotlin
** Emacs Development
*** EAF notmuch application
*** Better SSG with org
*** Use latest branch
*** LSP-ui 
 - https://github.com/emacs-lsp/lsp-ui/issues/187
 - https://github.com/emacs-lsp/lsp-ui/issues/285
*** Vterm
 - https://github.com/akermu/emacs-libvterm/issues/186
** Bugs
*** make anzu work [including with swiper] (currently not showing)
 - Not really a problem since I now use swiper [maybe not]
*** remove deprecated functions
*** ace-window work with ~scroll-margin~
*** Linum org headers
